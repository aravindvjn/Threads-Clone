// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thread {
  id         String   @id @default(uuid())
  content    String
  authorId   String
  likes      Int      @default(0)
  author     User     @relation(fields: [authorId], references: [id])
  image_urls String[]
  createdAt  DateTime @default(now())
  replies    Reply[]  @relation("ThreadReplies")
  likesList  Like[]   @relation("ThreadLikes")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade, name: "ThreadLikes")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  threadId  String
  thread    Thread   @relation("ThreadReplies", fields: [threadId], references: [id])
  authorId  String
  image_url String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique()
  username   String   @unique()
  profilePic String?
  password   String
  Thread     Thread[]
  Like       Like[]
  Reply      Reply[]
  Profile    Profile?
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  followers String[] 
  following String[] 
}
